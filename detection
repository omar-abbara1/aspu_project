from scapy.all import *
from scapy.layers.inet import IP, TCP
from scapy.layers.l2 import ARP, Ether
import threading
import datetime

IP_MAC_PAIRS = {}
ARP_REQ_TABLE = {}


def sniff_requests():
  
    sniff(filter='arp', lfilter=outgoing_req, prn=check_arp_header, iface=conf.iface)


def sniff_replays():
 
    sniff(filter='arp', lfilter=incoming_reply, prn=check_arp_header, iface=conf.iface)


def print_arp(pkt):
   
    if pkt[ARP].op == 1:
        print(pkt[ARP].hwsrc, ' who has ', pkt[ARP].pdst)
    else:
        print(pkt[ARP].psrc, ' is at ', pkt[ARP].hwsrc)


def incoming_reply(pkt):

    return pkt[ARP].psrc != str(get_if_addr(conf.iface)) and pkt[ARP].op == 2


def outgoing_req(pkt):
   
    return pkt[ARP].psrc == str(get_if_addr(conf.iface)) and pkt[ARP].op == 1


def check_arp_header(pkt):

    if not pkt[Ether].src == pkt[ARP].hwsrc or not pkt[Ether].dst == pkt[ARP].hwdst:
        return alarm('inconsistent ARP message')

def alarm(alarm_type):

    print('Under Attack ', alarm_type)


if __name__ == "__main__":
    req_ = threading.Thread(target=sniff_requests, args=())
    req_.start()
    rep_ = threading.Thread(target=sniff_replays, args=())
    rep_.start()
