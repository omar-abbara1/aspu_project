import scapy.all as scapy
import subprocess
from datetime import datetime
import netifaces

INTERFACE = "wlan0"  #edit as needed
LOG_FILE = "/var/log/network_hardening.log"    

def log_event(event):
    with open(LOG_FILE, "a") as log_file:
        log_file.write(f"{datetime.now()} - {event}\n")

def get_mac(ip):
    arp_request = scapy.ARP(pdst=ip)
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_request_broadcast = broadcast / arp_request
    answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]
    
    return answered_list[0][1].hwsrc if answered_list else None

def get_default_gateway():
    gateways = netifaces.gateways()
    return gateways['default'][netifaces.AF_INET][0]

def get_local_ip():
    return netifaces.ifaddresses(INTERFACE)[netifaces.AF_INET][0]['addr']

def get_local_mac():
    return netifaces.ifaddresses(INTERFACE)[netifaces.AF_LINK][0]['addr']

def populate_whitelist():
    router_ip = get_default_gateway()
    router_mac = get_mac(router_ip)

    local_ip = get_local_ip()
    local_mac = get_local_mac()

    WHITELIST = {
        router_ip: router_mac,
        local_ip: local_mac
    }
    
    event = f"[INFO] Whitelist populated: {WHITELIST}"
    print(event)
    log_event(event)

    return WHITELIST

def enforce_static_arp(WHITELIST):
    for ip, mac in WHITELIST.items():
        event = f"[INFO] Enforcing static ARP entry for IP {ip} with MAC {mac}."
        print(event)
        log_event(event)
        subprocess.call(["arp", "-s", ip, mac])

def harden_network():
    print("[INFO] Hardening network settings.")
    log_event("[INFO] Hardening network settings.")
    subprocess.call(["sysctl", "-w", "net.ipv4.ip_forward=0"])
    subprocess.call(["sysctl", "-w", "net.ipv4.conf.all.arp_filter=1"])
    subprocess.call(["sysctl", "-w", "net.ipv4.conf.default.arp_filter=1"])
    subprocess.call(["iptables", "-A", "INPUT", "-p", "arp", "--arp-mac", "!", "-j", "DROP"])

def main():
    WHITELIST = populate_whitelist()
    enforce_static_arp(WHITELIST)
    harden_network()

    print("[INFO] Network hardening completed.")
    log_event("[INFO] Network hardening completed.")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n[INFO] Exiting and cleaning up...")
        log_event("[INFO] Exiting and cleaning up...")
        subprocess.call(["iptables", "-F"])
